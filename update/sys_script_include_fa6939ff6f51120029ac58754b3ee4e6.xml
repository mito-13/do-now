<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_donow.DoNowUtil</api_name>
        <client_callable>false</client_callable>
        <description>A collection of utilities to manage the DoNow logic</description>
        <name>DoNowUtil</name>
        <script><![CDATA[var DoNowUtil = Class.create();
DoNowUtil.prototype =Object.extendsObject(global.AbstractAjaxProcessor,
{
	tokenRE: /\+([^@]+)\@/,
	contextRE: /@("([^"]+)|(\w+))(?![^@]*@)/,
	priorityRE: /\s\!(\w*)(?![^!]*\!)/,
	foundContext: false,
	foundPriority: false,
	
	/*
	Description:
	Return:
 	*/
	getDefaultContextRecord : function(user) {
		gs.debug("Entering getDefaultContext, user=" +user);
		var gr = new GlideRecord("x_snc_donow_context");
		gr.addQuery("owner", user);
		gr.addQuery("my_default", true);
		gr.query();
		if (gr.next()) {
			gs.debug("In getDefaultContext, user =" +user+ " and value= "+gr.getValue('value') );
			return gr;
		}
		return null;
		
	},
	
	getDefaultContextValue : function(user) {
		var gr = this.getDefaultContextRecord(user);
		if (gr != null) {
			return gr.getValue('value');
		} else {
			return null;
		}
	},
	
	getDefaultContextID : function(user) {
		var gr = this.getDefaultContextRecord(user);
		if (gr != null) {
			return gr.getUniqueValue();
		} else {
			return null;
		}
	},
	
	getMyDefaultContextValue : function() {
		var userID = gs.getUserID();
		var context = this.getDefaultContextValue(gs.getUserID());
		gs.debug("In getMyDefaultContextValue, userID=" + userID + " context = " + context);
		return context;
		
	},
	
	getMyDefaultContextID : function() {
		var userID = gs.getUserID();
		var context = this.getDefaultContextID(gs.getUserID());
		gs.debug("In getMyDefaultContextID, userID=" + userID + " context = " + context);
		return context;
		
	},
	
	getGTDUser: function(emailAddress) {
		var token = null;
		var found = this.tokenRE.exec(emailAddress);
		if (found) {
			token = found[1];
			gs.debug("Entering getGTDUers, emailAddress=" +emailAddress);
			gs.debug("token=" +token);
			var gr = new GlideRecord('x_snc_donow_email_token');
			gr.addQuery('token', token);
			gr.query();
			if (gr.next()){
				gs.debug("In if of getGTDUers, emailAddress=" +emailAddress + " gr.user=" + gr.user +" gr.token =" + gr.token );
				return gr.getValue('user');
			}
		}
		
		return null;
	},
	
	hasGTDUser: function(emailAddress) {
		var user = this.getGTDUser(emailAddress);
		/* if user is not null, this is true */
		return user != null;
	},
	
	findContext: function(contextName, user) {
		var gr = new GlideRecord("x_snc_donow_context");
		gr.addQuery("value", contextName);
		gr.addQuery("owner", user);
		gr.query();
		if (gr.next()) {
			gs.debug("In findContext, contextName =" +contextName+ " and value= "+gr.getValue('value') );
			return gr.getUniqueValue();
		}
		return null;
	},
	
	findPriority: function(priorityName) {
		var gr = new GlideRecord("sys_choice");
		gr.addQuery("name", "x_snc_donow_action");
		gr.addQuery("label", priorityName);
		gr.query();
		if (gr.next()) {
			gs.debug("In findPriority, priorityName =" +priorityName+ " and value= "+gr.getValue('value') );
			return gr.getValue('value');
		}
		return null;
	},
	
	
	/*
 	*/
	parseContext: function(subject, user) {
		var contextID = null;
		var found = this.contextRE.exec(subject);
		if (found) {
			var length = found.length;
			var quoted_context = found[length-2];
			var unquoted_context = found[length-1];
			var context = null;
			if (quoted_context != null) {
				context = quoted_context;
			} else if (unquoted_context != null) {
				context = unquoted_context;
			}
			gs.debug("In parseContext found branch for" +subject+ ": quoted_context = "+quoted_context +" unquoted_context = "+unquoted_context + " context = " + context );
			
			// doing this to return null if there is no such context
			// with this string in DB, IE there is a twitter handle
			//but no real context in the subject
			contextID = this.findContext(context, user);
		}
		if (contextID == null) {
			contextID = this.getDefaultContextID(user);
			this.foundContext = false;
		} else {
			this.foundContext = true;
		}
		
		return contextID;
	},
	
	sanitizeSubject: function(subject) {
		var sanitized =  subject.replace("Fwd: ", "").replace("Re: ", "").replace("FW: ", "");
		if (this.foundContext) {
			sanitized = sanitized.replace(this.contextRE, "");
		}
		if (this.foundPriority) {
			sanitized = sanitized.replace(this.priorityRE, "");
		}
		
		return sanitized;
	},
	
	parsePriority: function(subject) {
		var priorityID = null;
		var found = this.priorityRE.exec(subject);
		if (found) {
			var length = found.length;
			var priority = null;
			priority = found[1];
			gs.debug("in parsePriority - regex found "+ priority);
			
			// doing this to return null if there is no such context
			// with this string in DB, IE there is a twitter handle
			//but no real context in the subject
			priorityID = this.findPriority(priority);
		}
		if (priorityID == null) {
			this.foundPriority = false;
		} else {
			this.foundPriority = true;
		}
		
		return priorityID;
	},
	
	/*
 	 * getUserActionHierarchy - get a list of action records in a hierarchical related order
 	 *
 	 * @params none
 	 * @returns array of objects describing each record
 	 *
 	 */
	getUserActionHierarchy : function() {
		var userID = gs.getUserID();
		var list = [];
		var archiveDays = this.getUserPreference('donow.archive.days', 7);
		var queryString = 'active=true^' +
			'assigned_to=' + userID + '^OR' +
			'opened_by=' + userID + '^NQ' +
			'active=false^' +
			'assigned_to=' + userID + '^OR' +
			'opened_by=' + userID + '^' +
			'closed_atRELATIVEGE@dayofweek@ago@' + archiveDays;
		
		// One GlideRecord query to build the array - more memory, but faster (fewer DB hits)
		var task = new GlideRecord('task');
		task.addEncodedQuery(queryString);
		task.orderBy('execution_order');
		task.query();
		gs.debug('queryString=' + queryString);
		gs.debug(task.getRowCount() + ' records read');
		
		while (task.next()) {
			var obj = {};
			obj.id = task.getValue('sys_id');
				
			obj.parent = task.getValue('parent');
			obj.title = task.getValue('number') + ': ' + task.getValue('short_description');
			// obj.title = task.number + ': ' + task.getValue('short_description');
			// obj.order = task.getValue('execution_order');
			// obj.short_description = task.getValue('short_description');
			// obj.number = task.getValue('number');
			// obj.sys_id = task.getValue('sys_id');
			obj.parentNumber = task.parent.number + ': ' + task.parent.short_description;
			obj.active = task.getValue('active') == 1;
			list.push(obj);
		}
			
		var orderList = this._buildTreeFromArray(list);
		// gs.debug('orderList=' + JSON.stringify(orderList, null, 2));
			
		return orderList;
	},
	
	/*
	 * _makeTitleString - trim the string if too long
	 *
	 * @param str - string to be formatted
	 * @param depth - indentation level depth
	 * @return - cleaned up string
	 *
	 */
	_makeTitleString : function(str, depth) {
		
		var answer = str;
		var maxlen = 45 - ((depth - 1) * 10);
		if (maxlen > 0 && str.length > maxlen) {
			answer = str.substring(0, maxlen) + '...';
		}
		
		return answer;
	},
		
	/*
	 * _buildTreeFromArray - take an array and connect the children as sub-arrays
	 *
 	 * @param arr - array of simple objects (parent field must point to id of another record)
 	 * @returns structured array of objects
 	 *
 	 */
	_buildTreeFromArray : function(arr) {
		
		var objList = [];
		
		for (i = 0; i < arr.length; i++) {
			
			// If this is a top level task, find all children
			if (!arr[i].parent) {
				arr[i].title = this._makeTitleString(arr[i].title, 1);
				arr[i].nodes = this._getChildren(arr[i], arr, 0);
				objList.push(arr[i]);
			}
		}
		
		return objList;
	},
		
	/*
	 * _getChildren - find all records in the list where the parent field points to 'top'
	 *                Works recursively through the tree.
	 *
 	 * @param top - the parent being matched against
 	 * @param list - list of all records
 	 * @param level - used for debugging only
 	 * @returns array of objects including, and belonging to 'top'
 	 *
 	 */
	_getChildren : function(top, list, level) {
		
		var answer = [];
		++level;
		gs.debug('level=' + level + ' top.title=' + top.title);
		for (var i = 0; i < list.length; i++) {
			var obj = list[i];
			
			if (obj.parent == top.id) {
				// gs.debug('  obj.number=' + obj.number);
				obj.nodes = this._getChildren(obj, list, level);
				// gs.debug('     nodes=' + JSON.stringify(answer.nodes, null, 2));
				obj.title = this._makeTitleString(obj.title, level);
				gs.debug('    _makeTitleString(): obj=' + JSON.stringify(obj, null, 2));
				answer.push(obj);
			}
		}
			
		// gs.debug('   answer=' + JSON.stringify(answer, null, 2));
		return answer;
	},
	
	/*
	 * getUserPreference - retrieve a user preference from the sys_user_preference table
	 *                     If the user doesn't have one, check if there is a system definition
	 *                     If neither are found, use the defaultValue parameter
	 *
	 * @param name - string value of the name of the preference we're looking for
	 * @param defaultValue - what to return of a user or system pref is not found
	 * @returns typed value of int/string/reference/boolean
	 *
	 */
	getUserPreference : function(name, defaultValue) {
		
		// first check if there is a user specific one
		var userID = gs.getUserID();
		var answer = defaultValue;
		var type = 'string';
		var up = new GlideRecord('sys_user_preference');
		
		up.addQuery('name', name);
		up.addQuery('user', userID);
		up.query();
		
		if (up.next()) {
			answer = up.getValue('value');
			type = up.getValue('type');
			
		// Next check if there is a system specific one
		} else {
			var sp = new GlideRecord('sys_user_preference');
		
			sp.addQuery('name', name);
			sp.addQuery('system', true);
			sp.query();
			
			if (sp.next()) {
				answer = sp.getValue('value');
				type = sp.getValue('type');
			}
		}
		
		switch (type) {
			case 'integer':
				answer = parseInt(answer, 10);
				break;
			case 'boolean':
				answer = (answer == 'true');
				break;
			case 'reference':
			case 'string':
				break;
		}

		return answer;
	},
		
	type: 'DoNowUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-02-07 17:27:51</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fa6939ff6f51120029ac58754b3ee4e6</sys_id>
        <sys_mod_count>80</sys_mod_count>
        <sys_name>DoNowUtil</sys_name>
        <sys_package display_value="DoNow" source="x_snc_donow">bb8ba81b13d11600351d58a12244b0eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DoNow">bb8ba81b13d11600351d58a12244b0eb</sys_scope>
        <sys_update_name>sys_script_include_fa6939ff6f51120029ac58754b3ee4e6</sys_update_name>
        <sys_updated_by>chuck.tomasi</sys_updated_by>
        <sys_updated_on>2016-12-15 00:09:29</sys_updated_on>
    </sys_script_include>
</record_update>
